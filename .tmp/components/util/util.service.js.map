{"version":3,"sources":["../../../client/components/util/util.service.js"],"names":[],"mappings":"AAAA;;AAEA,CAAC,YAAW;;;;;AAKZ,WAAS,WAAT,CAAqB,OAArB,EAA8B;AAC5B,QAAI,OAAO;;;;;;;;AAOT,8BAAO,IAAI;AACT,eAAO,OAAC,CAAQ,UAAR,CAAmB,EAAnB,CAAD,GAA2B,EAA3B,GAAgC,QAAQ,IAAR,CAD9B;OAPF;;;;;;;;;AAiBT,kCAAS,KAAK;AACZ,YAAI,IAAI,SAAS,aAAT,CAAuB,GAAvB,CAAJ,CADQ;AAEZ,UAAE,IAAF,GAAS,GAAT;;;AAFY,YAKR,EAAE,IAAF,KAAW,EAAX,EAAe;AACjB,YAAE,IAAF,GAAS,EAAE,IAAF,CADQ;SAAnB;;AAIA,eAAO,CAAP,CATY;OAjBL;;;;;;;;;;AAoCT,0CAAa,KAAK,SAAS;AACzB,cAAM,KAAK,QAAL,CAAc,GAAd,CAAN,CADyB;AAEzB,kBAAU,OAAC,IAAW,GAAG,MAAH,CAAU,OAAV,CAAX,IAAkC,EAAnC,CAFe;AAGzB,kBAAU,QAAQ,GAAR,CAAY,KAAK,QAAL,CAAtB,CAHyB;AAIzB,gBAAQ,IAAR,CAAa,QAAQ,QAAR,CAAb,CAJyB;AAKzB,kBAAU,QAAQ,MAAR,CAAe,UAAS,CAAT,EAAY;AACnC,iBAAO,IAAI,QAAJ,KAAiB,EAAE,QAAF,IACtB,IAAI,IAAJ,KAAa,EAAE,IAAF,IACb,IAAI,QAAJ,KAAiB,EAAE,QAAF,CAHgB;SAAZ,CAAzB,CALyB;AAUzB,eAAQ,QAAQ,MAAR,IAAkB,CAAlB,CAViB;OApClB;KAAP,CADwB;;AAmD5B,WAAO,IAAP,CAnD4B;GAA9B;;AAsDA,UAAQ,MAAR,CAAe,yBAAf,EACG,OADH,CACW,MADX,EACmB,WADnB,EA3DY;CAAX,CAAD","file":"util.service.js","sourcesContent":["'use strict';\n\n(function() {\n\n/**\n * The Util service is for thin, globally reusable, utility functions\n */\nfunction UtilService($window) {\n  var Util = {\n    /**\n     * Return a callback or noop function\n     *\n     * @param  {Function|*} cb - a 'potential' function\n     * @return {Function}\n     */\n    safeCb(cb) {\n      return (angular.isFunction(cb)) ? cb : angular.noop;\n    },\n\n    /**\n     * Parse a given url with the use of an anchor element\n     *\n     * @param  {String} url - the url to parse\n     * @return {Object}     - the parsed url, anchor element\n     */\n    urlParse(url) {\n      var a = document.createElement('a');\n      a.href = url;\n\n      // Special treatment for IE, see http://stackoverflow.com/a/13405933 for details\n      if (a.host === '') {\n        a.href = a.href;\n      }\n\n      return a;\n    },\n\n    /**\n     * Test whether or not a given url is same origin\n     *\n     * @param  {String}           url       - url to test\n     * @param  {String|String[]}  [origins] - additional origins to test against\n     * @return {Boolean}                    - true if url is same origin\n     */\n    isSameOrigin(url, origins) {\n      url = Util.urlParse(url);\n      origins = (origins && [].concat(origins)) || [];\n      origins = origins.map(Util.urlParse);\n      origins.push($window.location);\n      origins = origins.filter(function(o) {\n        return url.hostname === o.hostname &&\n          url.port === o.port &&\n          url.protocol === o.protocol;\n      });\n      return (origins.length >= 1);\n    }\n  };\n\n  return Util;\n}\n\nangular.module('spirit99StationApp.util')\n  .factory('Util', UtilService);\n\n})();\n"]}